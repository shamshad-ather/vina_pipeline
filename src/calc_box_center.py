import numpy as np
import sys
import os
import warnings

def calculate_box(pdbqt_file, buffer=10.0):
    """Calculates bounding box center and size for all ATOM/HETATM in a PDBQT file."""
    coords = []
    with open(pdbqt_file, 'r') as f:
        for line in f:
            if line.startswith("ATOM") or line.startswith("HETATM"):
                try:
                    # PDBQT format spec is generally fixed width
                    x = float(line[30:38].strip())
                    y = float(line[38:46].strip())
                    z = float(line[46:54].strip())
                    coords.append([x, y, z])
                except (ValueError, IndexError):
                    warnings.warn(f"Skipping malformed coordinate line in {pdbqt_file}: {line.rstrip()}")
                    continue # Skip lines that don't parse correctly
    
    if not coords:
        raise ValueError(f"No valid ATOM/HETATM coordinates found in {pdbqt_file}!")
    
    coords = np.array(coords)
    
    # Calculate min/max coordinates for each axis
    min_coords = np.min(coords, axis=0)
    max_coords = np.max(coords, axis=0)
    
    # Compute box center and dimensions
    center = (min_coords + max_coords) / 2.0
    # Ensure size is positive even for single-atom structures, add buffer
    size = np.maximum(1.0, max_coords - min_coords) + (2.0 * buffer) 
    
    return center, size

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python calc_box_center.py <receptor.pdbqt> [buffer=10.0]", file=sys.stderr)
        sys.exit(1)
    
    pdbqt_file = sys.argv[1]
    try:
        buffer = float(sys.argv[2]) if len(sys.argv) > 2 else 10.0
    except ValueError:
        print("Error: Buffer must be a number.", file=sys.stderr)
        sys.exit(1)

    if not os.path.exists(pdbqt_file):
        print(f"Error: Receptor file not found: {pdbqt_file}", file=sys.stderr)
        sys.exit(1)
        
    try:
        center, size = calculate_box(pdbqt_file, buffer)
        receptor_name = os.path.basename(pdbqt_file).replace(".pdbqt", "")
        
        # Create config directory if it doesn't exist
        config_dir = "configs"
        os.makedirs(config_dir, exist_ok=True)
        output_file = os.path.join(config_dir, f"{receptor_name}.txt")
        
        # Write config file (ensure consistent formatting)
        with open(output_file, 'w') as f:
            f.write(f"# Vina Configuration for {receptor_name}\n")
            f.write(f"# Generated by calc_box_center.py\n\n")
            f.write(f"center_x = {center[0]:.4f}\n") # More precision for center
            f.write(f"center_y = {center[1]:.4f}\n")
            f.write(f"center_z = {center[2]:.4f}\n")
            f.write("\n")
            f.write(f"size_x = {size[0]:.3f}\n") # Standard precision for size
            f.write(f"size_y = {size[1]:.3f}\n")
            f.write(f"size_z = {size[2]:.3f}\n")
            f.write("\n")
            # Optional: Add other default parameters if desired
            # f.write("num_modes = 9\n") 
            # f.write("energy_range = 3\n")
            f.write("spacing = 1.0\n") # Vina default is 1.0, no need to specify unless changing

        print(f"Configuration file saved to {output_file}")

    except Exception as e:
        print(f"Error processing {pdbqt_file}: {e}", file=sys.stderr)
        sys.exit(1)